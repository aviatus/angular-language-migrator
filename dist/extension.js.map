{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://angular-language-migrator/external commonjs \"vscode\"","webpack://angular-language-migrator/external node-commonjs \"fs\"","webpack://angular-language-migrator/external node-commonjs \"path\"","webpack://angular-language-migrator/webpack/bootstrap","webpack://angular-language-migrator/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nconst { readdir } = fs.promises;\n\nexport interface MigrationOptions {\n\tmoduleNaming: boolean;\n\tchangeHtml: boolean;\n}\n\nlet texts = new Map();\nlet options: MigrationOptions = {\n\tmoduleNaming: true,\n\tchangeHtml: true\n};\n\nconst base = \"0000\";\nconst tags = ['a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'span'];\nconst bannedChars = ['>', '<', '{{', '}}'];\nlet customText = '';\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('Angular Language Migrator activated!');\n\n\tlet disposable = vscode.commands.registerCommand('angular-language-migrator.startMigration', () => {\n\t\tvscode.window.showInformationMessage('HTML Scanning Started...');\n\n\t\tif (vscode.workspace.workspaceFolders !== undefined) {\n\t\t\tconst currentlyOpenTabfilePath = vscode.workspace.workspaceFolders[0].uri.fsPath + '/src';\n\t\t\tconst scannedFiles = scanFiles(currentlyOpenTabfilePath);\n\n\t\t\tPromise.resolve(scannedFiles).then((files: string | string[]) => {\n\t\t\t\tif (!Array.isArray(files)) {\n\t\t\t\t\tfiles = [files];\n\t\t\t\t}\n\n\t\t\t\tfiles.forEach(fileName => getTextsFromFile(fileName));\n\t\t\t\tconsole.log('Scanning Successfully Completed');\n\t\t\t});\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log('Language Migration File Creation Started...');\n\t\t\t\tfs.writeFile(currentlyOpenTabfilePath + \"/language-output.json\", JSON.stringify(Object.fromEntries(texts)), () => {\n\t\t\t\t\tconsole.log('Language Migration File Creation Completed....');\n\t\t\t\t\tvscode.window.showInformationMessage('Language Migration Completed.');\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tconst message = \"Angular Language Migrator: Working folder not found, open a folder an try again\";\n\t\t\tvscode.window.showErrorMessage(message);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nexport function deactivate() {\n\tconsole.log('Angular Language Migrator deactivated!');\n}\n\nfunction getTagRegex(tag: string): RegExp {\n\treturn new RegExp(`<${tag}.*>(.*?)<\\/${tag}>`, 'g');\n}\n\nfunction getKey(map: Map<string, string>, val: string): string {\n\treturn [...map].find(([, value]) => val === value)?.[0] as string;\n}\n\nfunction getUppercase(text: string): string {\n\treturn text.split('.')[0].toUpperCase().replace(/-/g, '_');\n}\n\nasync function scanFiles(dir: string): Promise<string | string[]> {\n\tconst dirents = await readdir(dir, { withFileTypes: true });\n\tconst files = await Promise.all(dirents.filter(dirent => dirent.name.endsWith('.html') || dirent.isDirectory()).map((dirent) => {\n\t\tconst res = path.resolve(dir, dirent.name);\n\t\treturn dirent.isDirectory() ? scanFiles(res) : res;\n\t}));\n\n\treturn Array.prototype.concat(...files);\n}\n\nasync function getTextsFromFile(filePath: string) {\n\tconst fileName = getUppercase(path.parse(filePath).base);\n\tlet moduleName = '';\n\n\tif (options.moduleNaming) {\n\t\tconst index = filePath.split('\\\\').findIndex(item => item === 'app');\n\t\tmoduleName = index > 0 ? getUppercase(filePath.split('\\\\')[index + 1]) + '_' : '';\n\t}\n\n\tfs.readFile(filePath, 'utf-8', (_err, data) => {\n\t\tlet text = trimHtml(data);\n\t\tif (text.length > 0) {\n\t\t\tconst textMap = [...new Map(text.map((t: string, index: number) => {\n\t\t\t\tlet key = moduleName + fileName + '_' + base.substring(0, base.length - index.toString().length) + index.toString();\n\t\t\t\treturn [key, t];\n\t\t\t}))];\n\t\t\ttexts = new Map([...texts].concat(textMap));\n\n\t\t\tif (options.changeHtml) {\n\t\t\t\tlet results = '';\n\t\t\t\ttext.forEach((item) => results = data.replace(item, customText + getKey(textMap as any, item)));\n\t\t\t\tfs.writeFile(filePath, results, 'utf8', (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn console.error(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction trimHtml(text: string) {\n\tconst nTags: Array<RegExpMatchArray | null> = tags.map((tag) => text.match(getTagRegex(tag)));\n\tlet merged: Array<string> = [].concat.apply([], nTags as []).filter(a => a);\n\tif (merged) {\n\t\tmerged = merged.map(t => t.replace(/<\\/?[^>]+(>|$)/g, \"\")).filter(t => t);\n\t}\n\n\treturn merged.filter(t => bannedChars.every((char) => !t.includes(char)));\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","readdir","fs","promises","texts","Map","base","tags","bannedChars","getUppercase","text","split","toUpperCase","replace","async","scanFiles","dir","dirents","withFileTypes","files","Promise","all","filter","dirent","name","endsWith","isDirectory","map","res","path","resolve","Array","prototype","concat","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","workspace","workspaceFolders","currentlyOpenTabfilePath","uri","fsPath","scannedFiles","then","isArray","forEach","fileName","filePath","parse","moduleName","index","findIndex","item","readFile","_err","data","nTags","tag","match","RegExp","getTagRegex","merged","apply","a","t","every","char","includes","trimHtml","length","textMap","substring","toString","results","val","find","value","writeFile","err","error","getTextsFromFile","setTimeout","JSON","stringify","Object","fromEntries","message","showErrorMessage","subscriptions","push"],"sourceRoot":""}